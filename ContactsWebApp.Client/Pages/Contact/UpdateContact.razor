@inject HttpClient httpClient
@inject IToastService toastService

<EditForm Model="@ContactDto" OnValidSubmit="UpdateContactMetod">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="ContactDto.Name" />
    </div>
    <div class="form-group mt-4">
        <label for="surname">Surname</label>
        <InputText id="surname" class="form-control" @bind-Value="ContactDto.Surname" />
    </div>
    <div class="form-group mt-4">
        <label for="phone-number">Phone Number</label>
        <InputText id="phone-number" class="form-control" @bind-Value="ContactDto.PhoneNumber" />
    </div>
    <button type="submit" class="btn btn-primary mt-4">Update Contact</button>
    <button class="btn btn-danger mt-4" @onclick="Cancel">Cancel</button>
</EditForm>


@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    // [Parameter]
    // public string? ContactId { get; set; }

    [Parameter]
    public ContactDto ContactDto { get; set; } = new ContactDto();

    private async Task Cancel() => await BlazoredModal.CancelAsync();

    private async Task UpdateContactMetod()
    {
        var response = await httpClient.PostAsJsonAsync("api/Contact/update", ContactDto);
        if (response.IsSuccessStatusCode)
        {
            var apiResponse = await response.Content.ReadFromJsonAsync<ApiResponse>();
            if (apiResponse == null || !apiResponse.IsSucces)
            {
                toastService.ShowError(apiResponse?.Message!);
                return;
            }
            await BlazoredModal.CloseAsync(ModalResult.Ok(apiResponse.Message));
        }
        else
        {
            var apiResponse = await response.Content.ReadFromJsonAsync<ApiResponse>();
        }
    }
}
